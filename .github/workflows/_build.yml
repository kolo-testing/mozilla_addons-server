name: Build Docker Image

run-name: Build ${{ github.workflow }} version:${{ inputs.version }} target:${{ inputs.target }}

on:
  workflow_call:
    inputs:
      version:
        type: string
        required: false
        description: The docker version to override automated tag with
      target:
        type: string
        required: true
        description: The docker stage to target in the build
    outputs:
      artifact_name:
        description: The name of the artifact where the development image was uploaded
        value: ${{ jobs.build.outputs.artifact_name }}
      version:
        description: The docker version of the built images
        value: ${{ jobs.build.outputs.version }}

env:
  # These valus must be kept in sync with `run-docker`
  # So we know where to load the docker image from
  docker_artifact_name: build-docker
  docker_image_file: image.tar

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      artifact_name: ${{ steps.input_meta.outputs.artifact_name }}
      version: ${{ steps.docker_meta.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - id: input_meta
        shell: bash
        run: |
          echo "image=${{ github.repository }}" >> $GITHUB_OUTPUT

          artifact_name="${{ env.docker_artifact_name }}-${{ inputs.target }}"
          echo "artifact_name=$artifact_name" >> $GITHUB_OUTPUT

          version_enabled=${{ inputs.version != '' && true || false }}
          echo "version_enabled=$version_enabled" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: docker_meta
        env:
          version_enabled: ${{ steps.input_meta.outputs.version_enabled }}
          suffix: -next
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.input_meta.outputs.image }}
          tags: |
              type=raw,enabled=${{ env.version_enabled }},priority=1000,value=${{ inputs.version }}
              type=ref,enable=true,priority=600,suffix=${{ env.suffix }},event=branch
              type=ref,enable=true,priority=600,suffix=${{ env.suffix }},event=tag
              type=ref,enable=true,priority=600,prefix=pr-,suffix=${{ env.suffix }},event=pr

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          buildkitd-flags: --debug

      - name: Local Environment Setup
        shell: bash
        env:
          DOCKER_VERSION: ${{ steps.docker_meta.outputs.version }}
          DOCKER_COMMIT: ${{ github.sha }}
          VERSION_BUILD_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          make setup

      - name: Build Docker Image
        id: build
        uses: docker/build-push-action@v6
        with:
          # Build Context
          context: .
          file: Dockerfile
          target: ${{ inputs.target }}
          platforms: linux/amd64

          # Export the image to `image.tar`
          push: false
          load: false
          outputs: |
            type=docker,dest=${{ env.docker_image_file }}

          # Metadata
          tags: ${{ steps.docker_meta.outputs.tags }}
          annotations: ${{ steps.docker_meta.outputs.annotations }}
          labels: ${{ steps.docker_meta.outputs.labels }}

          # Cache Information
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload Development Image
        uses: actions/upload-artifact@v4
        with:
          # We need to upload to a named artifact that is exposed to `run-docker`
          name: ${{ steps.input_meta.outputs.artifact_name }}
          # Upload just the single tar file
          path: ${{ env.docker_image_file }}
          # We expect artifacts to be found, explicitly error if none are
          if-no-files-found: error
          # Artifacts should not last long, each run will create a new one
          retention-days: 1
          # Optimize for speed rather than size
          compression-level: 1
          # We should never create the exact same artifact twice in the same run
          overwrite: false
