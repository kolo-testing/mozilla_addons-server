name: Verify Docker Image

on:
  pull_request:
    branches:
      - master

jobs:
  docker_config_check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - expected: { version: 'local', push: false, uid: ''}
            input: { version: '', push: '', uid: '' }
          - expected: { version: version, push: true, uid: '1' }
            input: { version: version, push: true, uid: '1' }

    steps:
      - uses: actions/checkout@v4

      - name: Check Docker Compose (default)
        id: default
        shell: bash
        run: |
          set -ue

          export SUPERUSER_EMAIL="email"
          export SUPERUSER_USERNAME="username"

          if [ -n "${{ matrix.input.version }}" ]; then
            export DOCKER_VERSION="${{ matrix.expected.version }}"
          fi

          if [ -n "${{ matrix.input.push }}" ]; then
            export DOCKER_PUSH="${{ matrix.expected.push }}"
          fi

          if [ -n "${{ matrix.input.uid }}" ]; then
            export HOST_UID="${{ matrix.expected.uid }}"
          fi

          function test_assert() {
            echo "Expected: $1"
            echo "Actual: $2"
            if [ -n "${3:-}" ]; then echo "Message: $3"; fi
            if [[ "$1" != "$2" ]]; then exit 1; fi
          }

          function test_compose() {
            test_assert "$(make docker_compose_config | yq e $1 -)" "$2" "$1"
          }

          function test_bake() {
            test_assert "$(make docker_build_config | jq -r $1)" "$2" "$1"
          }

          test_compose '.services.web.image' "mozilla/addons-server:${{ matrix.expected.version }}"

          expected_id=$(id -u)
          if [ -n "${{ matrix.input.uid }}" ]; then expected_id="${{ matrix.expected.uid }}"; fi
          test_compose '.services.web.environment.HOST_UID' "$expected_id"

          test_compose '.services.web.environment.SUPERUSER_EMAIL' "$SUPERUSER_EMAIL"
          test_compose '.services.web.environment.SUPERUSER_USERNAME' "$SUPERUSER_USERNAME"

          # Expect docker push args are correct
          builder="test_builder"
          progress="test_progress"
          actual_build_args=$(
            make docker_build_args \
              DOCKER_PROGRESS=$progress \
              DOCKER_BUILDER=$builder
          )
          expected_build_args="docker buildx bake web --progress=$progress --builder=$builder"

          if [[ ${{ matrix.expected.push }} == "true" ]]; then
            expected_build_args="$expected_build_args --push"
          else
            expected_build_args="$expected_build_args --load"
          fi

          test_assert "$actual_build_args" "$expected_build_args"

          # Expect docker platform is correct
          test_compose '.services.web.platform' 'linux/amd64'
          test_bake '.target.web.platforms[0]' 'linux/amd64'

  verify_docker_image:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        id: build
        uses: ./.github/actions/build-docker

      - name: Create failure
        id: failure
        uses: ./.github/actions/run-docker
        with:
          version: ${{ steps.build.outputs.version }}
          run: |
            exit 1
        continue-on-error: true
      - name: Verify failure
        if: always()
        run: |
          if [ "${{ steps.failure.outcome }}" -ne "failure" ]; then
            echo "Expected failure"
            exit 1
          fi

      - name: Check (special characters in command)
        uses: ./.github/actions/run-docker
        with:
          version: ${{ steps.build.outputs.version }}
          run: |
            echo 'this is a question?'
            echo 'a * is born'
            echo 'wow an array []'

      - name: Manage py check
        uses: ./.github/actions/run-docker
        with:
          version: ${{ steps.build.outputs.version }}
          run: |
            make check

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - id: build
        uses: ./.github/actions/build-docker

      - name: Run Test
        uses: ./.github/actions/run-docker
        with:
          version: ${{ steps.build.outputs.version }}
          services: ''
          run: |
            pytest \
              -n auto \
              -m 'not es_tests and not needs_locales_compilation and not static_assets and not internal_routes_allowed' \
              -v src/olympia/amo
